// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApplicationService service

type ApplicationServiceClient interface {
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ApplicationList, error)
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ArtifactList, error)
	CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*DeploymentList, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
}

type applicationServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationServiceClient(cc *grpc.ClientConn) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ApplicationList, error) {
	out := new(ApplicationList)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/GetArtifact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ArtifactList, error) {
	out := new(ArtifactList)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/ListArtifacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/CreateArtifact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/GetDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/ListDeployments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := grpc.Invoke(ctx, "/alecton.api.ApplicationService/CreateDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationService service

type ApplicationServiceServer interface {
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	ListApplications(context.Context, *ListApplicationsRequest) (*ApplicationList, error)
	CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error)
	GetArtifact(context.Context, *GetArtifactRequest) (*Artifact, error)
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ArtifactList, error)
	CreateArtifact(context.Context, *CreateArtifactRequest) (*Artifact, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	ListDeployments(context.Context, *ListDeploymentsRequest) (*DeploymentList, error)
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*Deployment, error)
}

func RegisterApplicationServiceServer(s *grpc.Server, srv ApplicationServiceServer) {
	s.RegisterService(&_ApplicationService_serviceDesc, srv)
}

func _ApplicationService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/CreateArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateArtifact(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alecton.api.ApplicationService/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alecton.api.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationService_GetApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _ApplicationService_ListApplications_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationService_CreateApplication_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _ApplicationService_GetArtifact_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _ApplicationService_ListArtifacts_Handler,
		},
		{
			MethodName: "CreateArtifact",
			Handler:    _ApplicationService_CreateArtifact_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _ApplicationService_GetDeployment_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _ApplicationService_ListDeployments_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _ApplicationService_CreateDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbf, 0xae, 0xd3, 0x30,
	0x18, 0xc5, 0x55, 0x10, 0x20, 0xb9, 0x4a, 0x9b, 0x7e, 0x6a, 0x69, 0x9b, 0x56, 0x14, 0x4c, 0x61,
	0xe8, 0x90, 0x08, 0xd8, 0xba, 0xf1, 0x47, 0xea, 0xc2, 0x04, 0x1b, 0x9b, 0x69, 0x4c, 0x65, 0x29,
	0x89, 0xdd, 0xd8, 0x54, 0x42, 0x55, 0x17, 0x5e, 0x81, 0x47, 0xe3, 0x15, 0x98, 0x79, 0x06, 0x14,
	0xd7, 0x26, 0x76, 0xd2, 0xea, 0xde, 0x3b, 0xe6, 0x3b, 0xc7, 0xfe, 0xf9, 0x1c, 0xc7, 0x28, 0x90,
	0xb4, 0x3c, 0xb0, 0x2d, 0x8d, 0x45, 0xc9, 0x15, 0x87, 0x6e, 0x4a, 0xca, 0x92, 0x66, 0x59, 0x4c,
	0x04, 0x8b, 0xe6, 0x3b, 0xce, 0x77, 0x19, 0x4d, 0x88, 0x60, 0x09, 0x29, 0x0a, 0xae, 0x88, 0x62,
	0xbc, 0x90, 0x67, 0x6b, 0x34, 0x20, 0x42, 0x64, 0x6c, 0xab, 0x67, 0x66, 0xd4, 0x23, 0xa5, 0x62,
	0xdf, 0xc8, 0x56, 0x99, 0xef, 0x30, 0xa5, 0x22, 0xe3, 0x3f, 0x72, 0x5a, 0x98, 0xc9, 0xeb, 0xbf,
	0x8f, 0x10, 0xbc, 0xad, 0xd7, 0x7d, 0x3e, 0xc3, 0x81, 0xa3, 0xde, 0x86, 0x2a, 0x47, 0x00, 0x1c,
	0x3b, 0x27, 0x89, 0x7d, 0xf1, 0x13, 0xdd, 0x7f, 0xa7, 0x52, 0x45, 0x13, 0xcf, 0xe3, 0x18, 0xf0,
	0xe2, 0xe7, 0xef, 0x3f, 0xbf, 0xee, 0x4d, 0x61, 0x9c, 0x1c, 0x5e, 0x25, 0xce, 0x39, 0x65, 0x72,
	0x2c, 0x48, 0x4e, 0x4f, 0x20, 0x50, 0xf8, 0x91, 0x49, 0x77, 0x53, 0x09, 0x4b, 0x6f, 0xbb, 0xa6,
	0x6c, 0xa1, 0xf3, 0x6b, 0xd0, 0x6a, 0x01, 0x9e, 0x68, 0x30, 0x40, 0xd8, 0x04, 0xc3, 0x1e, 0x0d,
	0xde, 0x97, 0x94, 0x28, 0xea, 0xa6, 0x7c, 0xe1, 0x6d, 0xd6, 0xd2, 0x6f, 0x0e, 0x3a, 0xd3, 0xbc,
	0x11, 0x6e, 0xf1, 0xd6, 0x9d, 0x15, 0xe4, 0xa8, 0x5b, 0x15, 0x67, 0xee, 0x04, 0x16, 0xad, 0x4a,
	0x8d, 0x62, 0x31, 0x23, 0x1f, 0x63, 0x54, 0xfc, 0x52, 0x33, 0x9e, 0xc2, 0x13, 0xcd, 0x30, 0x53,
	0xdb, 0x64, 0x72, 0x3c, 0xd0, 0x52, 0x32, 0x5e, 0x9c, 0x20, 0x45, 0x81, 0x2e, 0xcd, 0x3a, 0xe0,
	0x59, 0xbb, 0x50, 0xab, 0x59, 0xe4, 0xf4, 0x22, 0x52, 0x57, 0x39, 0xd2, 0xd8, 0x3e, 0x04, 0x1e,
	0x16, 0x28, 0xea, 0x99, 0x9e, 0x6c, 0x2e, 0x7c, 0xa9, 0xc4, 0xdb, 0x45, 0x33, 0xd7, 0x85, 0x7d,
	0x46, 0xd5, 0x1d, 0x43, 0xc1, 0x86, 0xaa, 0x0f, 0xff, 0xff, 0xdf, 0x46, 0x18, 0x4f, 0xb3, 0x90,
	0xb1, 0x67, 0xa9, 0x75, 0x3c, 0xd7, 0x98, 0xc7, 0x30, 0xac, 0x30, 0xf5, 0x9b, 0x90, 0xc9, 0x91,
	0xa5, 0x27, 0xc8, 0x50, 0xbf, 0x0a, 0x5c, 0xfb, 0x25, 0x3c, 0x6f, 0x35, 0xe7, 0xa8, 0x16, 0x37,
	0xbb, 0x82, 0xd3, 0xed, 0x8d, 0x35, 0x72, 0x00, 0xfd, 0x06, 0x12, 0x72, 0x14, 0x9e, 0x2b, 0x72,
	0xb2, 0x2d, 0x2f, 0x34, 0x78, 0x87, 0x78, 0x91, 0x66, 0x0d, 0x71, 0x93, 0xb5, 0xee, 0xac, 0xde,
	0x3d, 0xf8, 0x72, 0x9f, 0x08, 0xf6, 0xf5, 0xa1, 0x7e, 0xfe, 0x6f, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x1f, 0xaa, 0x02, 0x9d, 0x6f, 0x04, 0x00, 0x00,
}
