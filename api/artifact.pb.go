// Code generated by protoc-gen-go. DO NOT EDIT.
// source: artifact.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Artifact struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Branch  string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	Image   string `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *Artifact) Reset()                    { *m = Artifact{} }
func (m *Artifact) String() string            { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()               {}
func (*Artifact) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Artifact) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Artifact) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ArtifactList struct {
	Items []*Artifact `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ArtifactList) Reset()                    { *m = ArtifactList{} }
func (m *ArtifactList) String() string            { return proto.CompactTextString(m) }
func (*ArtifactList) ProtoMessage()               {}
func (*ArtifactList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ArtifactList) GetItems() []*Artifact {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetArtifactRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetArtifactRequest) Reset()                    { *m = GetArtifactRequest{} }
func (m *GetArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArtifactRequest) ProtoMessage()               {}
func (*GetArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetArtifactRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetArtifactRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ListArtifactsRequest struct {
	// if name is set, only get artifacts that match this name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListArtifactsRequest) Reset()                    { *m = ListArtifactsRequest{} }
func (m *ListArtifactsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListArtifactsRequest) ProtoMessage()               {}
func (*ListArtifactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ListArtifactsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateArtifactRequest struct {
	Artifact  *Artifact `protobuf:"bytes,1,opt,name=artifact" json:"artifact,omitempty"`
	Overwrite bool      `protobuf:"varint,2,opt,name=overwrite" json:"overwrite,omitempty"`
}

func (m *CreateArtifactRequest) Reset()                    { *m = CreateArtifactRequest{} }
func (m *CreateArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateArtifactRequest) ProtoMessage()               {}
func (*CreateArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateArtifactRequest) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (m *CreateArtifactRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func init() {
	proto.RegisterType((*Artifact)(nil), "alecton.api.Artifact")
	proto.RegisterType((*ArtifactList)(nil), "alecton.api.ArtifactList")
	proto.RegisterType((*GetArtifactRequest)(nil), "alecton.api.GetArtifactRequest")
	proto.RegisterType((*ListArtifactsRequest)(nil), "alecton.api.ListArtifactsRequest")
	proto.RegisterType((*CreateArtifactRequest)(nil), "alecton.api.CreateArtifactRequest")
}

func init() { proto.RegisterFile("artifact.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0xff, 0xc4, 0x74, 0x2a, 0x1e, 0x16, 0x0b, 0xa1, 0x14, 0x0d, 0x39, 0x15, 0xa5,
	0x09, 0x28, 0x08, 0xe2, 0xc9, 0x7a, 0xf0, 0xe2, 0x29, 0x47, 0x6f, 0x9b, 0x74, 0x4c, 0x17, 0x93,
	0x6c, 0xdc, 0x9d, 0x26, 0x6f, 0xe0, 0x6b, 0x0a, 0x3e, 0x89, 0x98, 0x74, 0x63, 0x23, 0x78, 0xf2,
	0x16, 0x7e, 0xf3, 0xe5, 0xb7, 0xdf, 0x30, 0x70, 0xc2, 0x15, 0x89, 0x17, 0x9e, 0x50, 0x50, 0x2a,
	0x49, 0x92, 0x4d, 0x37, 0x5c, 0x29, 0xcc, 0xb2, 0x80, 0x97, 0x62, 0x7e, 0x93, 0x0a, 0xda, 0xee,
	0xe2, 0x20, 0x91, 0x79, 0x98, 0xd7, 0x82, 0x5e, 0x65, 0x1d, 0xa6, 0x72, 0xd5, 0x24, 0x57, 0x15,
	0xcf, 0xc4, 0x86, 0x93, 0x54, 0x3a, 0xec, 0x3e, 0x5b, 0x89, 0xff, 0x6e, 0x81, 0x73, 0xbf, 0xf7,
	0xb2, 0x39, 0x8c, 0x0a, 0x9e, 0xa3, 0x6b, 0x79, 0xd6, 0x72, 0xb2, 0xb6, 0x3f, 0x3f, 0xce, 0x07,
	0x9e, 0x15, 0x35, 0x8c, 0x79, 0x70, 0x54, 0xa1, 0xd2, 0x42, 0x16, 0xee, 0xa0, 0x37, 0x36, 0x98,
	0x9d, 0x81, 0x1d, 0x2b, 0x5e, 0x24, 0x5b, 0x77, 0xd8, 0x0b, 0xec, 0x29, 0x5b, 0xc0, 0x58, 0xe4,
	0x3c, 0x45, 0x77, 0xd4, 0x1b, 0xb7, 0xd0, 0xbf, 0x83, 0x63, 0xd3, 0xe3, 0x49, 0x68, 0x62, 0x97,
	0x30, 0x16, 0x84, 0xb9, 0x76, 0x2d, 0x6f, 0xb8, 0x9c, 0x5e, 0xcd, 0x82, 0x83, 0x6d, 0x03, 0x93,
	0x8c, 0xda, 0x8c, 0x1f, 0x01, 0x7b, 0x44, 0xea, 0x28, 0xbe, 0xed, 0x50, 0xff, 0x73, 0x1d, 0xff,
	0x02, 0x4e, 0xbf, 0x8b, 0x18, 0xa9, 0x36, 0x56, 0x76, 0x68, 0x6d, 0x6d, 0x7e, 0x09, 0xb3, 0x07,
	0x85, 0x9c, 0xf0, 0x77, 0x85, 0x5b, 0x70, 0xcc, 0xd5, 0x9a, 0x1f, 0xfe, 0x5a, 0xa4, 0x7b, 0xbe,
	0x8b, 0xb3, 0x05, 0x4c, 0x64, 0x85, 0xaa, 0x56, 0x82, 0xb0, 0xe9, 0xe8, 0x44, 0x3f, 0x60, 0x3d,
	0x7e, 0x1e, 0xf2, 0x52, 0xc4, 0x76, 0x73, 0xc5, 0xeb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19,
	0xc7, 0xa6, 0x63, 0x1c, 0x02, 0x00, 0x00,
}
